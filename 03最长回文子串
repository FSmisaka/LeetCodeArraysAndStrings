题目：给定一个字符串 s，找到 s 中最长的回文子串。

样例01：
输入：s = "babad"
输出："bab"

样例02:
输入：s = "a"
输出："a"

心路历程：
% TLE写法：
  写一个函数用来判断是否为回文串，然后遍历所有子串判断是否为回文。遍历方式：0:1 0:2 0:3 ... 0:len(s) 1:2 1:3 ... 1:len(s) ... len(s)-1 len(s)
  如果判断为回文子串并且判断子串长度大于目前备选答案的长度，则更新备选答案。
  简单的修正：遍历方式改为按照回文串长度从大到小遍历（从len(s)到1），判断为回文子串则直接return
·AC代码 时间复杂度O(N^3), 空间复杂度O(1); 8000ms左右
class Solution:
    def isHui(self, st: str) -> bool:
            for i in range(len(st)//2+1):
                if st[i] != st[len(st)-i-1]:
                    return False
            return True
    def longestPalindrome(self, s: str) -> str:
        l = len(s)
        lt = l
        while(lt > 0):
            for i in range(0,l-lt+1):
                if self.isHui(s[i:i+lt]):
                    return s[i:i+lt]
            lt -= 1

% 中心扩散
  枚举中心节点（奇数/偶数）再从节点向两侧扩散
·AC代码 时间复杂度O(N^2), 空间复杂度O(1); 300ms左右
class Solution:
    def isHui(self, st: str) -> bool:
            for i in range(len(st)//2+1):
                if st[i] != st[len(st)-i-1]:
                    return False
            return True
    def longestPalindrome(self, s: str) -> str:
        maxLen = 0
        l = len(s)
        ansLeft = -1
        ansRight = -1
        for i in range(l):
            left, right = i, i
            while left>=0 and right<l:
                if s[left] != s[right]:
                    break
                left -= 1
                right += 1
            if right-left-1 > maxLen:
                maxLen = right-left-1
                ansLeft = left
                ansRight = right
        for i in range(l-1):
            left, right = i, i+1
            while left>=0 and right<l:
                if s[left] != s[right]:
                    break
                left -= 1
                right += 1
            if right-left-1 > maxLen:
                maxLen = right-left-1
                ansLeft = left
                ansRight = right
        return s[ansLeft+1:ansRight]
